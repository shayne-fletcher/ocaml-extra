# buildifier: disable=no-effect
prebuilt_cxx_library(
    name = "ocaml-dev",
    header_dirs = [
        "opam/lib/ocaml",
    ],
    header_only = True,
    visibility = [
        "PUBLIC",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "libasmrun.a",
    src = "opam/lib/ocaml/libasmrun.a",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "interop_includes",
    src = "opam/lib/ocaml",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "ocamlrun",
    src = "opam/bin/ocamlrun",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "ocamldebug",
    src = "opam/bin/ocamldebug",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
command_alias(
    name = "ocamldebug-exe",
    exe = ":ocamldebug",
    resources = [
        ":ocamlrun",
        ":ocamldebug",
        "opam/lib/ocaml",
    ],
    visibility = [
        "PUBLIC",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
sh_binary(
    name = "ocaml-exe",
    main = "opam/bin/ocaml",
    visibility = [
        "PUBLIC",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
sh_binary(
    name = "ocamlopt-exe",
    main = "opam/bin/ocamlopt.opt",
    visibility = [
        "PUBLIC",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "ocamlopt.byte",
    src = "opam/bin/ocamlopt.byte",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
sh_binary(
    name = "menhir-exe",
    main = "opam/bin/menhir",
    visibility = [
        "PUBLIC",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
sh_binary(
    name = "ocamlprof-exe",
    main = "opam/bin/ocamlprof",
    visibility = [
        "PUBLIC",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
sh_binary(
    name = "dune-exe",
    main = "opam/bin/dune",
    visibility = [
        "PUBLIC",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
sh_binary(
    name = "ocamlmklib-exe",
    main = "opam/bin/ocamlmklib",
    visibility = [
        "PUBLIC",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
sh_binary(
    name = "ocamlruni-exe",
    main = "opam/bin/ocamlruni",
    visibility = [
        "PUBLIC",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "ocamllex.byte",
    src = "opam/bin/ocamllex.byte",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
sh_binary(
    name = "ocamlobjinfo-exe",
    main = "opam/bin/ocamlobjinfo.opt",
    visibility = [
        "PUBLIC",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
sh_binary(
    name = "ocamlyacc-exe",
    main = "opam/bin/ocamlyacc",
    visibility = [
        "PUBLIC",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
sh_binary(
    name = "safe_camlp4-exe",
    main = "opam/bin/safe_camlp4",
    visibility = [
        "PUBLIC",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
sh_binary(
    name = "ocamlfind-exe",
    main = "opam/bin/ocamlfind",
    visibility = [
        "PUBLIC",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
sh_binary(
    name = "ocamlmktop-exe",
    main = "opam/bin/ocamlmktop",
    visibility = [
        "PUBLIC",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
sh_binary(
    name = "ocamlrun-exe",
    main = "opam/bin/ocamlrun",
    visibility = [
        "PUBLIC",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
sh_binary(
    name = "ocamlc-exe",
    main = "opam/bin/ocamlc.opt",
    visibility = [
        "PUBLIC",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
sh_binary(
    name = "ocamldep-exe",
    main = "opam/bin/ocamldep.opt",
    visibility = [
        "PUBLIC",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "ocamldep.byte",
    src = "opam/bin/ocamldep.byte",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
sh_binary(
    name = "ocamllex-exe",
    main = "opam/bin/ocamllex.opt",
    visibility = [
        "PUBLIC",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
sh_binary(
    name = "ocamlrund-exe",
    main = "opam/bin/ocamlrund",
    visibility = [
        "PUBLIC",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
sh_binary(
    name = "ocamldoc-exe",
    main = "opam/bin/ocamldoc.opt",
    visibility = [
        "PUBLIC",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "ocamlc.byte",
    src = "opam/bin/ocamlc.byte",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "ocamlobjinfo.byte",
    src = "opam/bin/ocamlobjinfo.byte",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
sh_binary(
    name = "ocamlcmt-exe",
    main = "opam/bin/ocamlcmt",
    visibility = [
        "PUBLIC",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
sh_binary(
    name = "ocamlcp-exe",
    main = "opam/bin/ocamlcp",
    visibility = [
        "PUBLIC",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
sh_binary(
    name = "ocamloptp-exe",
    main = "opam/bin/ocamloptp",
    visibility = [
        "PUBLIC",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "bytes",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "bytes",
    lib_dir = "",
    include_dir = "opam/lib/bytes",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "compiler-libs",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "compiler-libs",
    lib_dir = "",
    include_dir = "opam/lib/ocaml/compiler-libs",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "compiler-libs.bytecomp",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "compiler-libs.bytecomp",
    lib_dir = "",
    include_dir = "opam/lib/ocaml/compiler-libs",
    native_lib = "opam/lib/ocaml/compiler-libs/ocamlbytecomp.cmxa",
    bytecode_lib = "opam/lib/ocaml/compiler-libs/ocamlbytecomp.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
        ":compiler-libs.common",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "compiler-libs.common",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "compiler-libs.common",
    lib_dir = "",
    include_dir = "opam/lib/ocaml/compiler-libs",
    native_lib = "opam/lib/ocaml/compiler-libs/ocamlcommon.cmxa",
    bytecode_lib = "opam/lib/ocaml/compiler-libs/ocamlcommon.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
        ":compiler-libs",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "compiler-libs.native-toplevel",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "compiler-libs.native-toplevel",
    lib_dir = "",
    include_dir = "opam/lib/ocaml/compiler-libs",
    native_lib = "opam/lib/ocaml/compiler-libs/ocamltoplevel.cmxa",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
        ":compiler-libs.optcomp",
        ":dynlink",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "compiler-libs.optcomp",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "compiler-libs.optcomp",
    lib_dir = "",
    include_dir = "opam/lib/ocaml/compiler-libs",
    native_lib = "opam/lib/ocaml/compiler-libs/ocamloptcomp.cmxa",
    bytecode_lib = "opam/lib/ocaml/compiler-libs/ocamloptcomp.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
        ":compiler-libs.common",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "compiler-libs.toplevel",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "compiler-libs.toplevel",
    lib_dir = "",
    include_dir = "opam/lib/ocaml/compiler-libs",
    bytecode_lib = "opam/lib/ocaml/compiler-libs/ocamltoplevel.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
        ":compiler-libs.bytecomp",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "dune",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "dune",
    lib_dir = "",
    include_dir = "opam/lib/dune",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "dynlink",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "dynlink",
    lib_dir = "",
    include_dir = "opam/lib/ocaml/dynlink",
    native_lib = "opam/lib/ocaml/dynlink/dynlink.cmxa",
    bytecode_lib = "opam/lib/ocaml/dynlink/dynlink.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "findlib",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "findlib",
    lib_dir = "",
    include_dir = "opam/lib/findlib",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
        ":findlib.internal",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "findlib.dynload",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "findlib.dynload",
    lib_dir = "",
    include_dir = "opam/lib/findlib",
    native_lib = "opam/lib/findlib/findlib_dynload.cmxa",
    bytecode_lib = "opam/lib/findlib/findlib_dynload.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
        ":findlib",
        ":dynlink",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "findlib.dynload.findlib_dynload-plugin",
    src = "opam/lib/findlib/findlib_dynload.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "findlib.internal",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "findlib.internal",
    lib_dir = "",
    include_dir = "opam/lib/findlib",
    native_lib = "opam/lib/findlib/findlib.cmxa",
    bytecode_lib = "opam/lib/findlib/findlib.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "findlib.internal.findlib-plugin",
    src = "opam/lib/findlib/findlib.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "findlib.top",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "findlib.top",
    lib_dir = "",
    include_dir = "opam/lib/findlib",
    native_lib = "opam/lib/findlib/findlib_top.cmxa",
    bytecode_lib = "opam/lib/findlib/findlib_top.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
        ":findlib.internal",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "menhir",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "menhir",
    lib_dir = "",
    include_dir = "opam/lib/menhir",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "menhirLib",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "menhirLib",
    lib_dir = "",
    include_dir = "opam/lib/menhirLib",
    native_lib = "opam/lib/menhirLib/menhirLib.cmxa",
    bytecode_lib = "opam/lib/menhirLib/menhirLib.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "menhirLib.menhirLib-plugin",
    src = "opam/lib/menhirLib/menhirLib.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "menhirSdk",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "menhirSdk",
    lib_dir = "",
    include_dir = "opam/lib/menhirSdk",
    native_lib = "opam/lib/menhirSdk/menhirSdk.cmxa",
    bytecode_lib = "opam/lib/menhirSdk/menhirSdk.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "menhirSdk.menhirSdk-plugin",
    src = "opam/lib/menhirSdk/menhirSdk.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "ocaml-compiler-libs",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "ocaml-compiler-libs",
    lib_dir = "",
    include_dir = "opam/lib/ocaml-compiler-libs",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "ocaml-compiler-libs.bytecomp",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "ocaml-compiler-libs.bytecomp",
    lib_dir = "",
    include_dir = "opam/lib/ocaml-compiler-libs/bytecomp",
    native_lib = "opam/lib/ocaml-compiler-libs/bytecomp/ocaml_bytecomp.cmxa",
    bytecode_lib = "opam/lib/ocaml-compiler-libs/bytecomp/ocaml_bytecomp.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
        ":compiler-libs.bytecomp",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "ocaml-compiler-libs.bytecomp.ocaml_bytecomp-plugin",
    src = "opam/lib/ocaml-compiler-libs/bytecomp/ocaml_bytecomp.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "ocaml-compiler-libs.common",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "ocaml-compiler-libs.common",
    lib_dir = "",
    include_dir = "opam/lib/ocaml-compiler-libs/common",
    native_lib = "opam/lib/ocaml-compiler-libs/common/ocaml_common.cmxa",
    bytecode_lib = "opam/lib/ocaml-compiler-libs/common/ocaml_common.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
        ":compiler-libs.common",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "ocaml-compiler-libs.common.ocaml_common-plugin",
    src = "opam/lib/ocaml-compiler-libs/common/ocaml_common.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "ocaml-compiler-libs.optcomp",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "ocaml-compiler-libs.optcomp",
    lib_dir = "",
    include_dir = "opam/lib/ocaml-compiler-libs/optcomp",
    native_lib = "opam/lib/ocaml-compiler-libs/optcomp/ocaml_optcomp.cmxa",
    bytecode_lib = "opam/lib/ocaml-compiler-libs/optcomp/ocaml_optcomp.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
        ":compiler-libs.optcomp",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "ocaml-compiler-libs.optcomp.ocaml_optcomp-plugin",
    src = "opam/lib/ocaml-compiler-libs/optcomp/ocaml_optcomp.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "ocaml-compiler-libs.shadow",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "ocaml-compiler-libs.shadow",
    lib_dir = "",
    include_dir = "opam/lib/ocaml-compiler-libs/shadow",
    native_lib = "opam/lib/ocaml-compiler-libs/shadow/ocaml_shadow.cmxa",
    bytecode_lib = "opam/lib/ocaml-compiler-libs/shadow/ocaml_shadow.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "ocaml-compiler-libs.shadow.ocaml_shadow-plugin",
    src = "opam/lib/ocaml-compiler-libs/shadow/ocaml_shadow.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "ocaml-compiler-libs.toplevel",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "ocaml-compiler-libs.toplevel",
    lib_dir = "",
    include_dir = "opam/lib/ocaml-compiler-libs/toplevel",
    native_lib = "opam/lib/ocaml-compiler-libs/toplevel/ocaml_toplevel.cmxa",
    bytecode_lib = "opam/lib/ocaml-compiler-libs/toplevel/ocaml_toplevel.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
        ":compiler-libs.toplevel",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "ocaml-compiler-libs.toplevel.ocaml_toplevel-plugin",
    src = "opam/lib/ocaml-compiler-libs/toplevel/ocaml_toplevel.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "ocamldoc",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "ocamldoc",
    lib_dir = "",
    include_dir = "opam/lib/ocaml/ocamldoc",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
        ":compiler-libs",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "ounit2",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "ounit2",
    lib_dir = "",
    include_dir = "opam/lib/ounit2",
    native_lib = "opam/lib/ounit2/oUnit.cmxa",
    bytecode_lib = "opam/lib/ounit2/oUnit.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
        ":ounit2.advanced",
        ":seq",
        ":unix",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "ounit2.oUnit-plugin",
    src = "opam/lib/ounit2/oUnit.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "ounit2.advanced",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "ounit2.advanced",
    lib_dir = "",
    include_dir = "opam/lib/ounit2/advanced",
    native_lib = "opam/lib/ounit2/advanced/oUnitAdvanced.cmxa",
    bytecode_lib = "opam/lib/ounit2/advanced/oUnitAdvanced.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
        ":stdlib-shims",
        ":seq",
        ":unix",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "ounit2.advanced.oUnitAdvanced-plugin",
    src = "opam/lib/ounit2/advanced/oUnitAdvanced.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "ounit2.threads",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "ounit2.threads",
    lib_dir = "",
    include_dir = "opam/lib/ounit2/threads",
    native_lib = "opam/lib/ounit2/threads/oUnitThreads.cmxa",
    bytecode_lib = "opam/lib/ounit2/threads/oUnitThreads.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
        ":threads",
        ":ounit2",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "ounit2.threads.oUnitThreads-plugin",
    src = "opam/lib/ounit2/threads/oUnitThreads.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "ppx_derivers",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "ppx_derivers",
    lib_dir = "",
    include_dir = "opam/lib/ppx_derivers",
    native_lib = "opam/lib/ppx_derivers/ppx_derivers.cmxa",
    bytecode_lib = "opam/lib/ppx_derivers/ppx_derivers.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "ppx_derivers.ppx_derivers-plugin",
    src = "opam/lib/ppx_derivers/ppx_derivers.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "ppxlib",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "ppxlib",
    lib_dir = "",
    include_dir = "opam/lib/ppxlib",
    native_lib = "opam/lib/ppxlib/ppxlib.cmxa",
    bytecode_lib = "opam/lib/ppxlib/ppxlib.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
        ":stdlib-shims",
        ":ppxlib.ast",
        ":ppxlib.astlib",
        ":ppx_derivers",
        ":sexplib0",
        ":ppxlib.stdppx",
        ":ocaml-compiler-libs.shadow",
        ":ppxlib.print_diff",
        ":ppxlib.traverse_builtins",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "ppxlib.ppxlib-plugin",
    src = "opam/lib/ppxlib/ppxlib.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "ppxlib.ast",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "ppxlib.ast",
    lib_dir = "",
    include_dir = "opam/lib/ppxlib/ast",
    native_lib = "opam/lib/ppxlib/ast/ppxlib_ast.cmxa",
    bytecode_lib = "opam/lib/ppxlib/ast/ppxlib_ast.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
        ":stdlib-shims",
        ":ppxlib.astlib",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "ppxlib.ast.ppxlib_ast-plugin",
    src = "opam/lib/ppxlib/ast/ppxlib_ast.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "ppxlib.astlib",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "ppxlib.astlib",
    lib_dir = "",
    include_dir = "opam/lib/ppxlib/astlib",
    native_lib = "opam/lib/ppxlib/astlib/astlib.cmxa",
    bytecode_lib = "opam/lib/ppxlib/astlib/astlib.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
        ":ocaml-compiler-libs.common",
        ":compiler-libs.common",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "ppxlib.astlib.astlib-plugin",
    src = "opam/lib/ppxlib/astlib/astlib.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "ppxlib.metaquot",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "ppxlib.metaquot",
    lib_dir = "",
    include_dir = "opam/lib/ppxlib/metaquot",
    native_lib = "opam/lib/ppxlib/metaquot/ppxlib_metaquot.cmxa",
    bytecode_lib = "opam/lib/ppxlib/metaquot/ppxlib_metaquot.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
        ":ppxlib",
        ":ppxlib.ast",
        ":ppxlib.astlib",
        ":ppxlib.traverse_builtins",
        ":ppxlib.metaquot_lifters",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "ppxlib.metaquot-runtime-deps",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "ppxlib.metaquot-runtime-deps",
    lib_dir = "",
    include_dir = "opam/lib/ppxlib/metaquot",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
        ":ppxlib.ast",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "ppxlib.metaquot.ppxlib_metaquot-plugin",
    src = "opam/lib/ppxlib/metaquot/ppxlib_metaquot.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "ppxlib.metaquot_lifters",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "ppxlib.metaquot_lifters",
    lib_dir = "",
    include_dir = "opam/lib/ppxlib/metaquot_lifters",
    native_lib = "opam/lib/ppxlib/metaquot_lifters/ppxlib_metaquot_lifters.cmxa",
    bytecode_lib = "opam/lib/ppxlib/metaquot_lifters/ppxlib_metaquot_lifters.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
        ":ppxlib",
        ":stdlib-shims",
        ":ppxlib.ast",
        ":ppxlib.stdppx",
        ":ppxlib.traverse_builtins",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "ppxlib.metaquot_lifters.ppxlib_metaquot_lifters-plugin",
    src = "opam/lib/ppxlib/metaquot_lifters/ppxlib_metaquot_lifters.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "ppxlib.print_diff",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "ppxlib.print_diff",
    lib_dir = "",
    include_dir = "opam/lib/ppxlib/print_diff",
    native_lib = "opam/lib/ppxlib/print_diff/ppxlib_print_diff.cmxa",
    bytecode_lib = "opam/lib/ppxlib/print_diff/ppxlib_print_diff.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "ppxlib.print_diff.ppxlib_print_diff-plugin",
    src = "opam/lib/ppxlib/print_diff/ppxlib_print_diff.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "ppxlib.runner",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "ppxlib.runner",
    lib_dir = "",
    include_dir = "opam/lib/ppxlib/runner",
    native_lib = "opam/lib/ppxlib/runner/ppxlib_runner.cmxa",
    bytecode_lib = "opam/lib/ppxlib/runner/ppxlib_runner.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
        ":ppxlib",
        ":ppxlib.ast",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "ppxlib.runner.ppxlib_runner-plugin",
    src = "opam/lib/ppxlib/runner/ppxlib_runner.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "ppxlib.runner_as_ppx",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "ppxlib.runner_as_ppx",
    lib_dir = "",
    include_dir = "opam/lib/ppxlib/runner_as_ppx",
    native_lib = "opam/lib/ppxlib/runner_as_ppx/ppxlib_runner_as_ppx.cmxa",
    bytecode_lib = "opam/lib/ppxlib/runner_as_ppx/ppxlib_runner_as_ppx.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
        ":ppxlib",
        ":ppxlib.ast",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "ppxlib.runner_as_ppx.ppxlib_runner_as_ppx-plugin",
    src = "opam/lib/ppxlib/runner_as_ppx/ppxlib_runner_as_ppx.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "ppxlib.stdppx",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "ppxlib.stdppx",
    lib_dir = "",
    include_dir = "opam/lib/ppxlib/stdppx",
    native_lib = "opam/lib/ppxlib/stdppx/stdppx.cmxa",
    bytecode_lib = "opam/lib/ppxlib/stdppx/stdppx.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
        ":stdlib-shims",
        ":sexplib0",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "ppxlib.stdppx.stdppx-plugin",
    src = "opam/lib/ppxlib/stdppx/stdppx.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "ppxlib.traverse",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "ppxlib.traverse",
    lib_dir = "",
    include_dir = "opam/lib/ppxlib/traverse",
    native_lib = "opam/lib/ppxlib/traverse/ppxlib_traverse.cmxa",
    bytecode_lib = "opam/lib/ppxlib/traverse/ppxlib_traverse.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
        ":ppxlib",
        ":stdlib-shims",
        ":ppxlib.ast",
        ":ppxlib.stdppx",
        ":ppxlib.traverse_builtins",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "ppxlib.traverse-runtime-deps",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "ppxlib.traverse-runtime-deps",
    lib_dir = "",
    include_dir = "opam/lib/ppxlib/traverse",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "ppxlib.traverse.ppxlib_traverse-plugin",
    src = "opam/lib/ppxlib/traverse/ppxlib_traverse.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "ppxlib.traverse_builtins",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "ppxlib.traverse_builtins",
    lib_dir = "",
    include_dir = "opam/lib/ppxlib/traverse_builtins",
    native_lib = "opam/lib/ppxlib/traverse_builtins/ppxlib_traverse_builtins.cmxa",
    bytecode_lib = "opam/lib/ppxlib/traverse_builtins/ppxlib_traverse_builtins.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "ppxlib.traverse_builtins.ppxlib_traverse_builtins-plugin",
    src = "opam/lib/ppxlib/traverse_builtins/ppxlib_traverse_builtins.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "runtime_events",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "runtime_events",
    lib_dir = "",
    include_dir = "opam/lib/ocaml/runtime_events",
    native_lib = "opam/lib/ocaml/runtime_events/runtime_events.cmxa",
    bytecode_lib = "opam/lib/ocaml/runtime_events/runtime_events.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "runtime_events.runtime_events-plugin",
    src = "opam/lib/ocaml/runtime_events/runtime_events.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "seq",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "seq",
    lib_dir = "",
    include_dir = "opam/lib/seq",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "sexplib0",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "sexplib0",
    lib_dir = "",
    include_dir = "opam/lib/sexplib0",
    native_lib = "opam/lib/sexplib0/sexplib0.cmxa",
    bytecode_lib = "opam/lib/sexplib0/sexplib0.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "sexplib0.sexplib0-plugin",
    src = "opam/lib/sexplib0/sexplib0.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "stdlib",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "stdlib",
    lib_dir = "",
    include_dir = "opam/lib/ocaml",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "stdlib-shims",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "stdlib-shims",
    lib_dir = "",
    include_dir = "opam/lib/stdlib-shims",
    native_lib = "opam/lib/stdlib-shims/stdlib_shims.cmxa",
    bytecode_lib = "opam/lib/stdlib-shims/stdlib_shims.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "stdlib-shims.stdlib_shims-plugin",
    src = "opam/lib/stdlib-shims/stdlib_shims.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "str",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "str",
    lib_dir = "",
    include_dir = "opam/lib/ocaml/str",
    native_lib = "opam/lib/ocaml/str/str.cmxa",
    bytecode_lib = "opam/lib/ocaml/str/str.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "str.str-plugin",
    src = "opam/lib/ocaml/str/str.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "threads",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "threads",
    lib_dir = "",
    include_dir = "opam/lib/ocaml/threads",
    native_lib = "opam/lib/ocaml/threads/threads.cmxa",
    bytecode_lib = "opam/lib/ocaml/threads/threads.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
        "opam/lib/ocaml/libthreads.a",
    ],
    bytecode_only = True,
    deps = [
        ":unix",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "threads.posix",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "threads.posix",
    lib_dir = "",
    include_dir = "opam/lib/ocaml/threads",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
        ":threads",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "unix",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "unix",
    lib_dir = "",
    include_dir = "opam/lib/ocaml/unix",
    native_lib = "opam/lib/ocaml/unix/unix.cmxa",
    bytecode_lib = "opam/lib/ocaml/unix/unix.cma",
    c_libs = None,
    native_c_libs = [
        "opam/lib/ocaml/libunixnat.a"
    ],
    bytecode_c_libs = [
        "opam/lib/ocaml/libunixbat.a"
    ],
    deps = [
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "unix.unix-plugin",
    src = "opam/lib/ocaml/unix/unix.cmxs",
) if not host_info().os.is_windows else None
